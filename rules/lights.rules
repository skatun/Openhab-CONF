rule "debug my rule"
when
	Item Scene_DayMode received command
then
switch receivedCommand {
    case 1:   vTimeOfDay.sendCommand("PREHEAT")
	case 2:   vTimeOfDay.sendCommand("SUNRISE")
	case 3:   vTimeOfDay.sendCommand("MORNING")
	case 4:   vTimeOfDay.sendCommand("DAY")
	case 5:   vTimeOfDay.sendCommand("WORK")
	case 6:   vTimeOfDay.sendCommand("AFTERNOON")
	case 7:   vTimeOfDay.sendCommand("EVENING")
	case 8:   vTimeOfDay.sendCommand("SUNSET")
	case 9:   vTimeOfDay.sendCommand("NIGHT")
	}
		
end 

rule "Workmode"
when
	Item Scene_Workmode received command
then
switch receivedCommand {
    case 0:   vWorkMode.sendCommand("OFF")
	case 1:   vWorkMode.sendCommand("NORMAL")
	case 2:   vWorkMode.sendCommand("GUESTS")
	case 3:   vWorkMode.sendCommand("HOLIDAY")
	}
		
end 

rule "Switch pressed"
when
    Item Group_LightSwitches changed from OPEN to CLOSED 
then 
	//received update
	Thread::sleep(5)
	Presence_Home.sendCommand(ON)
	val changedSwitch = Group_LightSwitches.members.filter[switchPressed | switchPressed.lastUpdate != null].sortBy[lastUpdate].last
	if(changedSwitch == null) logWarn("FILE", "Something is amiss, no Item has a valid lastUpdate!")

	val sceneItemTemp = changedSwitch.name.toUpperCase().replace("CONTACT","SCENE") as String
	
	val sceneItem = Group_RoomScenes.members.findFirst[roomName | sceneItemTemp.contains(roomName.name.toUpperCase())] as NumberItem
	
	logInfo("Light switch", "Scene is now " + sceneItem)
	if (sceneItem!=null){
        if(sceneItem.state == 0){
		    if (vTimeOfDay.state.toString.contains("NIGHT")){
			   sceneItem.sendCommand(2)
		    }
		   	else{
				sceneItem.sendCommand(1)
		   	}
	    }
	    else {
			sceneItem.sendCommand(0)
	    }
	}
end 


rule "turn off all lights"
when
    Item Light_All_Off received command ON
then 
	Scene_LivingRoom1.sendCommand(0)
	Scene_BathRoom.sendCommand(0)
	Scene_MasterBedRoom.sendCommand(0)
	Light_Hallway.sendCommand(OFF)
	if (vTimeOfDay.state.toString=="NIGHT"){
		MoodSelector_LivingRoom.sendCommand(4)
		Scene_LivingRoom1.sendCommand(6)
	}
	
end




/*
rule "Update kitchen light when button pressed"
when
    Item Contact_LivingRoomL changed from OPEN to CLOSED
then
	
	
if(Light_Kitchen.state == ON){
	sendCommand(Light_Kitchen,OFF)
	}
	else {
		Scene_LivingRoom1.sendCommand(9)
		
	}
end
*/



rule "Update bar light when button pressed"
when
    Item Contact_BalconyR changed from OPEN to CLOSED 
then
	
	

end


rule "Update balcony light when button pressed"
when
    Item Contact_BalconyL changed from OPEN to CLOSED 
then
	
	
if(Light_Balcony.state == ON){
	sendCommand(Light_Balcony,OFF)
		
	}
	else {
		sendCommand(Light_Balcony,ON)
		
	}
end

 
rule "Update hallway light when motion happens"
when
    Item HueMotionBathroom changed from CLOSED to OPEN 
then
	Presence_Home.sendCommand(ON)
	Light_Hallway_Timer.sendCommand(ON)
	if (Light_Hallway.state ==OFF) {
		Light_Hallway.sendCommand(ON)		
	}
	
end


rule "Update hallway light when motion dissapears"
when
	Item Light_Hallway_Timer received command OFF
    //Item HueMotionBathroom changed from OPEN to CLOSED 
then
	if (Light_Hallway.state ==ON) {
		Light_Hallway.sendCommand(OFF)
	}
	
end


/*
rule "Update hallway light when button pressed"
when
    Item Contact_BathroomL changed from OPEN to CLOSED or 
	Item Contact_BedroomL changed from OPEN to CLOSED
then
	

if(Light_Hallway.state == ON){
	sendCommand(Light_Hallway,OFF)
	}
	else {
		sendCommand(Light_Hallway,ON)
	}
end

rule "Update living room light when button pressed"
when
    Item Contact_LivingRoomR changed from OPEN to CLOSED
then
	if(Scene_LivingRoom1.state > 1){
		Scene_LivingRoom1.sendCommand(1)
	}
	else {
		Scene_LivingRoom1.sendCommand(2)
	}
	 

end


*/