import org.eclipse.smarthome.core.items.GroupItem
import org.eclipse.smarthome.core.library.types.HSBType
import org.eclipse.xtext.xbase.lib.Functions

var HSBType hsbValue
var HSBType hsbValueMasterBedRoom
var HSBType hsbValueBathRoom

val hsbOff = HSBType::fromRGB(0, 0, 0) 
val hsbOn = HSBType::fromRGB(255, 172, 68)
var boolean partyMode
	
var int redColor
var int greenColor
var int blueColor
var DecimalType dimmer_MasterBedRoom_Value

var int redValue
var int greenValue
var int blueValue
var String RGBvalues


 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Switch the different areas where LED-Lights should be switched on/off ////////////////7////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 val Functions.Function3 rgbLights= [ GroupItem mainGroup,GroupItem subGroup, HSBType hsbValueIn |
    val hsbOff = HSBType::fromRGB(0, 0, 0)
    mainGroup.members.filter[l|l.state.toString != hsbOff.toString].forEach[l| l.sendCommand(hsbOff.toString()) ]
	//mainGroup.members.filter[l|(l.state as HSBType).value != 0].forEach[l| l.sendCommand(hsbOff.toString()) ]
	subGroup.members.forEach[l2|l2.sendCommand(hsbValueIn)]	
]

rule "Activate Scene LivingRoom"
when
	Item Scene_LivingRoom received command or Item Scene_LivingRoom1 received command or Item Scene_LivingRoom2 received command or Item Scene_LivingRoom3 received command 
then
	Light_Kitchen.sendCommand(OFF)
	Light_Wall_TV.sendCommand(OFF)
	Light_Wall_Dinner.sendCommand(OFF)
	Light_Wall_FirePlace.sendCommand(OFF)
	

	if ((receivedCommand>0) && (receivedCommand<5)) {
    	Scene_LivingRoom2.postUpdate(0)
        Scene_LivingRoom3.postUpdate(0)
        logInfo("Debug","Received command is " + receivedCommand.toString() + " we deactivate 2 and 3" )
 	} 
 	else if ((receivedCommand>4) && (receivedCommand<9)) {
    	Scene_LivingRoom1.postUpdate(0)
        Scene_LivingRoom3.postUpdate(0)
        logInfo("Debug","Received command is " + receivedCommand.toString()+ " we deactivate 1 and 3" )
    }
 	else if ((receivedCommand>8) && (receivedCommand<13)) {
    	Scene_LivingRoom1.postUpdate(0)
        Scene_LivingRoom2.postUpdate(0)
        logInfo("Debug","Received command is " + receivedCommand.toString() + " we deactivate 1 and 2")
    }
    else{
    	Scene_LivingRoom1.postUpdate(0)
        Scene_LivingRoom2.postUpdate(0)
        Scene_LivingRoom3.postUpdate(0)
        logInfo("Debug","Received command is " + receivedCommand.toString() + " SHOULD NEVER HAPPEN")
    }
	
	
	switch receivedCommand  {
	//Default
	case 0: {
		}
	//OFF
	case 1:{
		Group_DMX_LivingRoom.members.filter[l|l.state.toString != hsbOff.toString].forEach[l| l.sendCommand(hsbOff.toString()) ]
		logInfo("Debug","turning off lights" )
	}
	//ON
	case 2:{
		Group_DMX_LivingRoom.members.filter[l|l.state.toString != hsbValue.toString].forEach[l| l.sendCommand(hsbOn.toString()) ]
		Light_Kitchen.sendCommand(ON)
		logInfo("Debug","turning on lights" )
		
	}
	//Dinner
	case 3:{
		hsbValue = HSBType::fromRGB(255, 255, 153) //Set color
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_Dinner,hsbValue)
	}
	//Reading
	case 4:{
		hsbValue = HSBType::fromRGB(255, 255, 153) //Set color
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_Reading,hsbValue)
	}
	//FirePlace
	case 5:{
		Light_Wall_FirePlace.sendCommand(ON)
		hsbValue = HSBType::fromRGB(127, 102, 25) //set color
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_FirePlace,hsbValue)
	}
	//Bar
	case 6:{
		hsbValue = HSBType::fromRGB(60, 100, 100)
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_Bar,hsbValue)
		
	}
	//PARTY
	case 7:{
		//executeCommandLine("curl@@-k@@-X@@POST@@https://us.wio.seeed.io/v1/node/GroveLedWs2812D0/start_rainbow_flow/60/80/1?access_token=3812ee2904de3f892d73b59b6d2c89a2",5000)
		Div_PartySwitch.sendCommand(ON)
	}
	//TV
	case 8:{
		hsbValue = HSBType::fromRGB(125, 100, 25)
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_TV,hsbValue)
		//Light_Wall_TV.sendCommand(ON)
	}
	//Cooking
	case 9:{
		hsbValue = HSBType::fromRGB(200, 255, 255)
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_Cooking,hsbValue)
		Light_Kitchen.sendCommand(ON)
	}
	//Wall
	case 10:{
		Light_Wall_Dinner.sendCommand(ON)
		hsbValue = HSBType::fromRGB(250, 200, 230)
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_Wall,hsbValue)
	}
	//Kitchen
	case 11:{
		hsbValue = HSBType::fromRGB(255, 255, 255)
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_Kitchen,hsbValue)
		Light_Kitchen.sendCommand(ON)
	}
	//Lounge
	case 12:{
		hsbValue = HSBType::fromRGB(255, 204, 51)
		rgbLights.apply(Group_DMX_LivingRoom,Group_DMX_Lounge,hsbValue)
		Light_Wall_Dinner.sendCommand(ON)
		Light_Wall_TV.sendCommand(ON)
		Light_Wall_FirePlace.sendCommand(ON)
	}
	
	}
	
	Color_LivingRoom.postUpdate(hsbValue.toString)
	Dimmer_LivingRoom.postUpdate((Color_LivingRoom.state as HSBType).value)

end


rule "Party time"

when
	Item Div_PartySwitch received command ON
then
        var Number fadeCounter 	
	//RAPIDLY CHANGE HSB FOR ALL LIGHTS ON
	val int brightness = 30//Dimmer_LivingRoom.state as PercenType
	
	while( Scene_LivingRoom2.state == 7) {
         //fadeCounter=fadeCounter+1
      	 Group_DMX_LivingRoom.members.forEach(light|
		        light.sendCommand((HSBType::fromRGB((Math::random * 255*brightness/100).intValue , (Math::random * 255*brightness/100).intValue , (Math::random * 255*brightness/100).intValue)).toString())
	 )  
         Thread::sleep(4000)
	}

end


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Change color freely ////////////////7////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Set RGB value Living Room"
    when
            Item Color_LivingRoom changed
    then
    	hsbValue = Color_LivingRoom.state as HSBType

		Group_DMX_LivingRoom.members.filter[l|
			//logInfo("Debug","Light brightness for  " +l.name + " is  "  + (l.state as HSBType).value)
			(l.state as HSBType).value!= 0
		].forEach[l| l.sendCommand(hsbValue.toString) ]
		
		Dimmer_LivingRoom.postUpdate((Color_LivingRoom.state as HSBType).value)
end


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Dim the lights //// ////////////////7//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Change dimming in Living Room"
when
	Item Dimmer_LivingRoom changed
then
	Color_LivingRoom.sendCommand(Dimmer_LivingRoom.state as PercentType)
end

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Change the moodings of light, e.g. warm white, white, lounge and night ////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule "Change the color in Living Room"
when
	Item MoodSelector_LivingRoom received command
then
	var String hexValue
	//warm white 255, 172, 68
	if (receivedCommand==1) {
		redColor = 255
		greenColor = 172
		blueColor = 68
		hexValue ="00FF00"
			
	}
        //white
	if (receivedCommand==2) {
		redColor = 255
		greenColor = 255
		blueColor =255
		hexValue ="0000FF" 
	}
	//lounge
	if (receivedCommand==3) {
		redColor = 255
		greenColor = 244
		blueColor =229	 
		hexValue ="FF0000" 
	}
	//night
	if (receivedCommand==4) {
		redColor = 100
		greenColor = 0
		blueColor =10
		hexValue ="FFFFFF" 
	}
	
	hsbValue   = HSBType::fromRGB(redColor, greenColor,blueColor)
	Color_LivingRoom.sendCommand(hsbValue.toString)
	
end





/***********************************************************************************************************
 * ************************************** MASTER BEDROOM ***************************************************
 * *********************************************************************************************************
 */

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Change color freely ////////////////7//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule "Set RGB value MasterBedRoom"
    when
            Item Color_MasterBedRoom changed
    then
    
    hsbValueMasterBedRoom = Color_MasterBedRoom.state as HSBType
    
	Group_DMX_MasterBedRoom.members.filter[l|
			(l.state as HSBType).value!= 0
		].forEach[l| l.sendCommand(hsbValueMasterBedRoom.toString()) ]
end

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Dim the lights //// ////////////////7//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Change dimming in Master BedRoom"
when
	Item Dimmer_MasterBedRoom changed
then
	Color_MasterBedRoom.sendCommand(Dimmer_MasterBedRoom.state as PercentType)
end


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Change the scene of light, e.g. warm white, white, lounge and night //////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "Change the scene in Master Bedroom"
when
	Item Scene_MasterBedRoom received command
then
	
	//warm white
	switch receivedCommand {

		
		//OFF
		case 1: {
		    hsbValueMasterBedRoom = HSBType::fromRGB(0, 0, 0)
		    Group_DMX_MasterBedRoom.members.forEach[l|l.sendCommand(hsbValueMasterBedRoom.toString())]	
		    Dimmer_MasterBedRoom.sendCommand(0)
		}
		//ON
		case 2:{
		    hsbValueMasterBedRoom = HSBType::fromRGB(255, 255, 255)
			//hsbValueMasterBedRoom=Color_MasterBedRoom.state as HSBType
		    rgbLights.apply(Group_DMX_MasterBedRoom,Group_DMX_MasterBedRoom,hsbValueMasterBedRoom)
		    //Dimmer_MasterBedRoom.sendCommand(80)
		}
		//NIGHT
		case 3:{
		    hsbValueMasterBedRoom = HSBType::fromRGB(50, 0, 10)
			//hsbValueMasterBedRoom=Color_MasterBedRoom.state as HSBType
		    rgbLights.apply(Group_DMX_MasterBedRoom,Group_DMX_MasterBedRoom,hsbValueMasterBedRoom)
		    //Dimmer_MasterBedRoom.sendCommand(60)
		}
		//READING
		case 4:{
		    hsbValueMasterBedRoom = HSBType::fromRGB(255, 204, 51)
		    rgbLights.apply(Group_DMX_MasterBedRoom,Group_MasterBedRoom_Reading,hsbValueMasterBedRoom)
		    //Dimmer_MasterBedRoom.sendCommand(100)
		}
	}		
	
end


/****************************************************************************************************
 * ***************************************** BATHROOM ***********************************************
 ************************************************************************************************* */


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Change color freely ////////////////7////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
rule "Set RGB value BathRoom"
    when
            Item Color_BathRoom changed
    then
    
    hsbValueBathRoom = Color_BathRoom.state as HSBType
  
    Group_DMX_BathRoom.members.filter[l|
			l.state.toString != hsbOff.toString
		].forEach[l| l.sendCommand(hsbValueBathRoom.toString()) ]
end

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////// Change the scene of light, e.g. warm white, white, lounge and night ////////////////////////////
//

rule "Change the scene in Bathroom"
when
	Item Scene_BathRoom received command
then
	
	//warm white
	switch receivedCommand {
		//OFF
		case 1: {
			hsbValueBathRoom   = HSBType::fromRGB(0, 0, 0)
			Group_DMX_BathRoom.members.forEach[l|l.sendCommand(hsbValueBathRoom.toString())]	
		}
		//ON
		case 2:{
			hsbValueBathRoom = HSBType::fromRGB(255, 255, 255)
		    rgbLights.apply(Group_DMX_BathRoom,Group_DMX_BathRoom,hsbValueBathRoom)
		}
		//NIGHT
		case 3:{
			hsbValueBathRoom = HSBType::fromRGB(50, 10, 10)
		    rgbLights.apply(Group_DMX_BathRoom,Group_DMX_BathRoom,hsbValueBathRoom)
		}
		//SHOWER
		case 4:{
			hsbValueBathRoom = HSBType::fromRGB(200, 200, 100)
		    rgbLights.apply(Group_DMX_BathRoom,Group_DMX_BathRoom,hsbValueBathRoom)
		}
	}		
	
end

