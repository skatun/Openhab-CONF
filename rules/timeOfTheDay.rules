val logName = "weather"

rule "Calculate time of day state"
when
  System started or
  Channel 'astro:sun:home:rise#event' triggered START or
  Channel 'astro:sun:home:set#event' triggered START or
  Channel 'astro:sun:minus90:set#event' triggered START or
  Time cron "0 0 7,22,0 * * ? *" // there is currently a bug where only one cron is triggered per rule so I've combined all three into one
then
  Thread::sleep(1000) // make sure we are a tad past midnight to give Astro a chance to recalculate DateTimes for today

  val long morning_start = now.withTimeAtStartOfDay.plusHours(7).millis
  val long day_start = (vSunrise_Time.state as DateTimeType).calendar.timeInMillis
  val long afternoon_start = (vEvening_Time.state as DateTimeType).calendar.timeInMillis
  val long evening_start = (vSunset_Time.state as DateTimeType).calendar.timeInMillis
  val long night_start = now.withTimeAtStartOfDay.plusHours(23).millis
  val long bed_start = now.withTimeAtStartOfDay.plusHours(23.5).millis

  var curr = "UNKNOWN"

  switch now {
        case now.isAfter(morning_start) && now.isBefore(day_start):       curr = "MORNING"
        case now.isAfter(day_start) && now.isBefore(afternoon_start):     curr = "DAY"
        case now.isAfter(afternoon_start) && now.isBefore(evening_start): curr = "AFTERNOON"
        case now.isAfter(evening_start) && now.isBefore(night_start):     curr = "EVENING"
        case now.isAfter(night_start):                                    curr = "NIGHT"
        case now.isAfter(bed_start) && now.isBefore(morning_start):       curr = "BED"
  }

  if(vTimeOfDay.state.toString != curr) {
    logInfo(logName, "Current time of day is now " + curr)
    vTimeOfDay.sendCommand(curr)
  }

end

rule "State Rule"
when
    Item vTimeOfDay received command
then
	//if WORKMODE.state.toString == "NORMAL") 
		
		if(vTimeOfDay.state.toString == "MORNING") {
		logInfo("DEBUG","Its morning " + vTimeOfDay.state.toString)
			//heatUp to 18C in bedrooms, 21C in livingroom,23C in bathroom
			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Day)
			Heating_BedRoom_Setpoint.sendCommand(Heating_BedRoom_Setpoint_Day)
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Day)

		}
		else if(vTimeOfDay.state.toString == "DAY") {
			//Dim lights for 15 minutes from 0% to 100% 
			//dimLights(Group_LivingRoom,100,15*60).apply	
			//dimLights(Group_MasterBedRoom,70,15*60).apply
			//dimLights(Group_Hallway,85,15*60).apply	
			//heatConstant to 18C in bedrooms, 21C in livingroom,23C in bathroom
		}
		else if (vTimeOfDay.state.toString == "WORK") {
			//heatDown to 10C in bedrooms, 12C in livingroom,16C in bathroom
			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Away)
			Heating_BedRoom_Setpoint.sendCommand(Heating_BedRoom_Setpoint_Away)
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Away)
		}
		else if (vTimeOfDay.state.toString == "AFTERNOON") {
			//heatUp to 18C in bedrooms, 19C in livingroom,23C in bathroom
		}
		else if TimeOfDay.state.toString == "EVENING") {
			//Dim lights for 60 minutes from 100% to 40% 
			//dimLights(Group_LivingRoom,40,60*60).apply	
			//dimLights(Group_Hallway,40,60*60).apply
			//heatup to 21C in living Room
			Dimmer_LivingRoom.sendcommand(40)
			
		else if vTimeOfDay.state.toString == "NIGHT")	
			//heatDown to 14C in bedrooms, 10C in livingroom,18C in bathroom
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Night.state)
			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Night.state)
		}
	//}
end