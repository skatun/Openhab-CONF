val logName = "time of day"
val morningWeekdays = 7
val morningWeekends = 8
val nightWeekdays = 23
val nightWeekends = 0
val preHeatMinutes = 15


rule "Calculate time of day state"
when
  // There MUST be a trigger for every time of day start time
  System started or
  Channel 'astro:sun:home:rise#event' triggered START or
  Channel 'astro:sun:home:set#event' triggered START or
  Channel 'astro:sun:minus90:set#event' triggered START or

  Item Alexa_Off received command OFF or
  Time cron "0 0 7 * * ? *" or // Morning weekdays
  Time cron "0 0 9 * * ? *" or // Morning weekends
  Time cron "0 45 6 * * ? *" or // Preheat weekdays
  Time cron "0 45 8 * * ? *" or // Preheat weekends
  Time cron "0 0 23 * * ? *" or // Night weekdays
  Time cron "1 0 0 * * ? *"  // Night weekends 
 
then


  // Now that we can use more than one cron trigger we don't need the sleep and can trigger the rule to occur one second after midnight

  // Is it the weekend?
  //val isWeekend = if(now.dayOfWeek >= 6) true else false // you will need to verify that Sat is 6 and Sun is 7

  // Use the morning and night hour based on isWeekend
  //val morning_hour = if(isWeekend) morningWeekends else morningWeekdays
  //val night_hour = if(isWeekend) nightWeekends else nightWeekdays

	val morning_hour= morningWeekdays
	val night_hour = nightWeekdays

  // Calculate the start time in epoch for ALL states
  val long preHeat_start   = now.withTimeAtStartOfDay.plusHours(morning_hour).minusMinutes(15).millis // 15 minutes before morning_start
  val long morning_start   = now.withTimeAtStartOfDay.plusHours(morning_hour).millis // morning_hour based on isWeekend
  val long day_start       = (vSunrise_Time.state as DateTimeType).calendar.timeInMillis // Astro
  val long afternoon_start = (vEvening_Time.state as DateTimeType).calendar.timeInMillis // Astro
  val long evening_start   = (vSunset_Time.state as DateTimeType).calendar.timeInMillis // Astro
  val long night_start     = now.withTimeAtStartOfDay.plusHours(night_hour).millis // night_hour based on isWeekend
	
  var curr = "UNKNOWN"

  switch now {
    case now.isAfter(preHeat_start) && now.isBefore(morning_start):   curr = "PREHEAT"
    case now.isAfter(morning_start) && now.isBefore(day_start):       curr = "MORNING"
    case now.isAfter(day_start) && now.isBefore(afternoon_start):     curr = "DAY"
    case now.isAfter(afternoon_start) && now.isBefore(evening_start): curr = "AFTERNOON"
    case now.isAfter(evening_start) && now.isBefore(night_start):     curr = "EVENING"
    case now.isAfter(night_start) && now.isBefore(preHeat_start):     curr = "NIGHT"
  }

  // These could probably be made a part of the switch statement but seems OK here
  // However, this will only work if the state will be set to ON at some point  that makes sense.
  if Alexa_Off.state==OFF && now.isAfter(morning_start) && now.isBefore(afternoon_start) curr = "WORK"
  if Alexa_Off.state==OFF && now.isAfter(evening_start) && now.isBefore(night_start) curr = "NIGHT" //Going earlier to bed

  Alexa_Off.sendCommand(ON)

  //if(vTimeOfDay.state.toString != curr) {
    logInfo(logName, "Current time of day is now " + curr)
    vTimeOfDay.sendCommand(curr)
  //}
=======
  Alexa_Off received command OFF or 
  Time cron "0 0 6,7,22,23,0 * * ? *" // there is currently a bug where only one cron is triggered per rule so I've combined all three into one
then

  Thread::sleep(1000) // make sure we are a tad past midnight to give Astro a chance to recalculate DateTimes for today

	val boolean isWeekend = if(now.dayOfWeek == 6 || now.dayOfWeek == 7) true else false
	if isWeekend{
		val long morning_start = now.withTimeAtStartOfDay.plusHours(morningWeekdays).millis
		val long night_start = now.withTimeAtStartOfDay.plusHours(nightWeekdays).millis
	}
	else{
		val long morning_start = now.withTimeAtStartOfDay.plusHours(morningWeekends).millis
		val long night_start = now.withTimeAtStartOfDay.plusHours(nightWeekends).millis
	}

	val long preHeat_start= morning_start.minusMinutes(preHeatMinutes).millis
	val long day_start = (vSunrise_Time.state as DateTimeType).calendar.timeInMillis
	val long afternoon_start = (vEvening_Time.state as DateTimeType).calendar.timeInMillis
	val long evening_start = (vSunset_Time.state as DateTimeType).calendar.timeInMillis
	val long night_start = now.withTimeAtStartOfDay.plusHours(23).millis
	

	var curr = "UNKNOWN"

	switch now {
			case now.isAfter(night_start) && now.isBefore(morning_start):     curr = "PREHEAT"
			case now.isAfter(morning_start) && now.isBefore(day_start):       curr = "MORNING"
			case now.isAfter(day_start) && now.isBefore(afternoon_start):     curr = "DAY"
			case now.isAfter(afternoon_start) && now.isBefore(evening_start): curr = "AFTERNOON"
			case now.isAfter(evening_start) && now.isBefore(night_start):     curr = "EVENING"
			case now.isAfter(night_start):                                    curr = "NIGHT"
		
	}

	if Alexa_Off.state==OFF and now.isAfter(morning_start) && now.isBefore(afternoon_start) curr = "WORK"
	if Alexa_Off.state==OFF and now.isAfter(evening_start) && now.isBefore(night_start) curr = "NIGHT" //Going earlier to bed

	//if(vTimeOfDay.state.toString != curr) {
		logInfo(logName, "Current time of day is now " + curr)
		vTimeOfDay.sendCommand(curr)
	//}


end

rule "State Rule"
when
    Item vTimeOfDay received command or
	Item vWorkMode received command
then


	if (vWorkMode.state.toString.contains("OFF")) {
			logInfo(logName, "Workmode is now " + vWorkMode.state.toString)
			Heating_LivingRoom_Setpoint.sendCommand(Heating_Setpoint_Day.state as DecimalType)
			Heating_MasterBedRoom_Setpoint.sendCommand(Heating_Setpoint_Day.state as DecimalType)
			Heating_BathRoom_Setpoint.sendCommand(Heating_Setpoint_Day.state as DecimalType)
			Heating_BedRoom_Setpoint.sendCommand(Heating_Setpoint_Day.state as DecimalType)
	}


	if (vWorkMode.state.toString.contains("HOLIDAY")) {
			logInfo(logName, "Workmode is now " + vWorkMode.state.toString)
			Heating_LivingRoom_Setpoint.sendCommand(Heating_Setpoint_Holiday.state as DecimalType)
			Heating_MasterBedRoom_Setpoint.sendCommand(Heating_Setpoint_Holiday.state as DecimalType)
			Heating_BathRoom_Setpoint.sendCommand(Heating_Setpoint_Holiday.state as DecimalType)
			Heating_BedRoom_Setpoint.sendCommand(Heating_Setpoint_Holiday.state as DecimalType)
	}

	if ((vWorkMode.state.toString.contains("NORMAL"))||(vWorkMode.state.toString.contains("GUESTS")){
		logInfo(logName, "Workmode is now " + vWorkMode.state.toString)
		logInfo(logName, "Current time of day is now " + vTimeOfDay.state.toString)
		
		if(vTimeOfDay.state.toString.contains("PREHEAT")){
			logInfo("DEBUG","Its morning " + vTimeOfDay.state.toString)
			//heatUp to 18C in bedrooms, 21C in livingroom,23C in bathroom
			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Day.state as DecimalType)
			Heating_MasterBedRoom_Setpoint.sendCommand(Heating_MasterBedRoom_Setpoint_Day.state as DecimalType)
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Day.state as DecimalType)

			if (vWorkMode.state.toString.contains("GUESTS"))
				Heating_BedRoom_Setpoint.sendCommand(Heating_BedRoom_Setpoint_Day.state as DecimalType)
			}
		}
		
		
		if(vTimeOfDay.state.toString.contains("MORNING")) {
			//Dim lights for 15 minutes from 0% to 100% 
			//dimLights(Group_LivingRoom,100,15*60).apply	
			//dimLights(Group_MasterBedRoom,70,15*60).apply
			//dimLights(Group_Hallway,85,15*60).apply	
			//heatConstant to 18C in bedrooms, 21C in livingroom,23C in bathroom
				
			Scene_LivingRoom1.sendCommand(2)			
		}
		
		
		if (vTimeOfDay.state.toString.contains("WORK")) {
			//heatDown to 10C in bedrooms, 12C in livingroom,16C in bathroom
			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Away.state as DecimalType)
			Heating_MasterBedRoom_Setpoint.sendCommand(Heating_MasterBedRoom_Setpoint_Away.state as DecimalType)
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Away.state as DecimalType)

			if (vWorkMode.state.toString.contains("GUESTS")){
				Heating_BedRoom_Setpoint.sendCommand(Heating_BedRoom_Setpoint_Away.state as DecimalType)
			}

			Scene_LivingRoom1.sendCommand(1)
			Scene_BathRoom.sendCommand(1)
			Scene_MasterBedRoom.sendCommand(1)
			Light_Hallway.sendCommand(OFF)
		}
		
		if (vTimeOfDay.state.toString.contains("AFTERNOON")) {
			//heatUp to 18C in bedrooms, 19C in livingroom,23C in bathroom
			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Day.state as DecimalType)
			Heating_MasterBedRoom_Setpoint.sendCommand(Heating_MasterBedRoom_Setpoint_Day.state as DecimalType)
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Day.state as DecimalType)

			if (vWorkMode.state.toString.contains("GUESTS")){
				Heating_BedRoom_Setpoint.sendCommand(Heating_BedRoom_Setpoint_Day.state as DecimalType)
			}

			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Day)
			Heating_BedRoom_Setpoint.sendCommand(Heating_BedRoom_Setpoint_Day)
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Day)

		}
		
		if (vTimeOfDay.state.toString.contains("EVENING")){
			//Dim lights for 60 minutes from 100% to 40% 
			//dimLights(Group_LivingRoom,40,60*60).apply	
			//dimLights(Group_Hallway,40,60*60).apply
			//heatup to 21C in living Room

			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Evening.state as DecimalType)

			Dimmer_LivingRoom.sendCommand(40)

		}	
		
		if (vTimeOfDay.state.toString.contains("NIGHT")){	
			//heatDown to 14C in bedrooms, 10C in livingroom,18C in bathroom

			Heating_LivingRoom_Setpoint.sendCommand(Heating_LivingRoom_Setpoint_Night.state as DecimalType)
			Heating_MasterBedRoom_Setpoint.sendCommand(Heating_MasterBedRoom_Setpoint_Night.state as DecimalType)
			Heating_BathRoom_Setpoint.sendCommand(Heating_BathRoom_Setpoint_Night.state as DecimalType)
			
			if (vWorkMode.state.toString.contains("GUESTS")){
				Heating_BedRoom_Setpoint.sendCommand(Heating_BedRoom_Setpoint_Night.state as DecimalType)
			}


			Scene_BathRoom.sendCommand(1)
			Scene_MasterBedRoom.sendCommand(1)
			Light_Hallway.sendCommand(OFF)
			Thread::sleep(10) 

			Scene_LivingRoom1.sendCommand(6)
			Thread::sleep(10) 
			MoodSelector_LivingRoom.sendCommand(4)
		
		}	
	}



end