val logName = "time of day"
val morningWeekdays = 7
val morningWeekends = 8
val nightWeekdays = 23
val nightWeekends = 0
val preHeatMinutes = 15
val evenings = 20
val afternoon = 10

rule "Calculate time of day state"
when
  // There MUST be a trigger for every time of day start time
  System started or
  Channel 'astro:sun:home:rise#event' triggered START or
  Channel 'astro:sun:home:set#event' triggered START or
  Channel 'astro:sun:minus90:set#event' triggered START or
  Item Alexa_Off received command OFF or
  Time cron "0 0 7 * * ? *" or // Morning weekdays
  Time cron "0 0 9 * * ? *" or // Morning weekends
  Time cron "0 45 6 * * ? *" or // Preheat weekdays
  Time cron "0 45 8 * * ? *" or // Preheat weekends
  Time cron "0 0 23 * * ? *" or // Night weekdays
  Time cron "0 0 20 * * ? *" or // Evenings
  Time cron "1 0 0 * * ? *"  // Night weekends 
 
then


  // Now that we can use more than one cron trigger we don't need the sleep and can trigger the rule to occur one second after midnight

  // Is it the weekend?
  //val isWeekend = if(now.dayOfWeek >= 6) true else false // you will need to verify that Sat is 6 and Sun is 7

  // Use the morning and night hour based on isWeekend
  //val morning_hour = if(isWeekend) morningWeekends else morningWeekdays
  //val night_hour = if(isWeekend) nightWeekends else nightWeekdays

	val morning_hour= morningWeekdays
	val night_hour = nightWeekdays

  // Calculate the start time in epoch for ALL states
  val long preHeat_start   = now.withTimeAtStartOfDay.plusHours(morning_hour).minusMinutes(15).millis // 15 minutes before morning_start
  val long morning_start   = now.withTimeAtStartOfDay.plusHours(morning_hour).millis // morning_hour based on isWeekend
  val long day_start       = now.withTimeAtStartOfDay.plusHours(morning_hour).millis//(vSunrise_Time.state as DateTimeType).calendar.timeInMillis // Astro
  val long afternoon_start = now.withTimeAtStartOfDay.plusHours(afternoon).millis //(vEvening_Time.state as DateTimeType).calendar.timeInMillis // Astro
  //val long evening_start   = (vSunset_Time.state as DateTimeType).calendar.timeInMillis // Astro
  val long night_start     = now.withTimeAtStartOfDay.plusHours(night_hour).millis // night_hour based on isWeekend
  val long sunset_start = (vSunrise_Time.state as DateTimeType).calendar.timeInMillis
  val long evening_start = now.withTimeAtStartOfDay.plusHours(evenings).millis
  val long tomorrow_start = now.withTimeAtStartOfDay.plusHours(evenings).millis


  var curr = "UNKNOWN"

  switch now {
    case now.isAfter(preHeat_start) && now.isBefore(morning_start):{   
        curr = "PREHEAT"
        Chart_Scene_DayMode.sendCommand(1)
    }

    case now.isAfter(morning_start) && now.isBefore(day_start):{       
        curr = "MORNING"
        Chart_Scene_DayMode.sendCommand(2)
    }

    case now.isAfter(day_start) && now.isBefore(afternoon_start):{     
        curr = "DAY"
        Chart_Scene_DayMode.sendCommand(3)
    }

    case now.isAfter(afternoon_start) && now.isBefore(evening_start):{
        curr = "AFTERNOON"
        Chart_Scene_DayMode.sendCommand(4)
    }

    case now.isBefore(sunset_start) && now.isAfter(evening_start) && now.isBefore(tomorrow_start) : {
        curr = curr
    }

    case now.isAfter(sunset_start)  && now.isAfter(evening_start) && now.isBefore(tomorrow_start) :{ 
        curr = "EVENING"
        Chart_Scene_DayMode.sendCommand(5)
    }

    case now.isAfter(night_start) : {
        curr = "NIGHT"
        Chart_Scene_DayMode.sendCommand(6)
    }
    
  }

  // These could probably be made a part of the switch statement but seems OK here
  // However, this will only work if the state will be set to ON at some point  that makes sense.
  if Alexa_Off.state==OFF && now.isAfter(morning_start) && now.isBefore(afternoon_start){
    curr = "WORK"
    Chart_Scene_DayMode.sendCommand(7)
  }
  if Alexa_Off.state==OFF && now.isAfter(evening_start) && now.isBefore(night_start){
       curr = "NIGHT" //Going earlier to bed
       Chart_Scene_DayMode.sendCommand(6)
  }
  

  //if(vTimeOfDay.state.toString != curr) {
    logInfo(logName, "Current time of day is now " + curr)
    vTimeOfDay.sendCommand(curr)
  //}

end

rule "State Heating Rule"
when
    Item vTimeOfDay received command or
	Item vWorkMode received command
then

 	// ---------------------- Create some initial variables ----------------------------
    val mode = vWorkMode.state.toString.toUpperCase()
    val tod = vTimeOfDay.state.toString.toUpperCase()

    logInfo(logName, "Workmode is now " + mode + " TOD is now " + tod)

    Group_SetPoint_Command.members.forEach[ room |

        val todGroup= Group_SetPoint.members.findFirst[g | g.name.equalsIgnoreCase("Group_SetPoint_"+tod)] as GroupItem
      
        // Get the setpoint name for this TOD
		val setpoint = todGroup.members.findFirst[sptod |sptod.name.contains(room.name)] as NumberItem      
     
        // Get the special setpoint if there isn't a normal one or we are not in normal mode, how to handle these ones????
        /*
        if(setpoint == null || mode != "NORMAL"){ 
            val specialTod = Group_SetPoint_Special.members.findFirst[specTod | specTod.name.equalsIgnoreCase("Group_SetPoint_Special_"+tod+"_"+mode)] as GroupItem
            //logInfo(logName, "SpecialTodGroup is now " + specialTod.toString)

            specialTod.members.forEach[spec|
                    if (spec.name.contains(room.name)){
                        val setpoint = spec as NumberItem
                    }
            ]

            if(setpoint == null){
                val specialWorkMode = Group_SetPoint_Special.members.findFirst[specWorkMode | specWorkMode.name.equalsIgnoreCase("Group_SetPoint_Special_"+mode)] as GroupItem
                    specialWorkMode.members.forEach[specMode|
                        val setpoint = specMode as NumberItem
                    ]
            }
            //val setpoint2 = specialTod.members.findFirst[spec | spec.name.contains(room.name)] as NumberItem     
            //logInfo(logName, "setpoint 43:---  " + setpoint2.state.toString)

        }
        */
        

        // if setpoint is null we do not change the heater's setting and let it stay the same as it was before How to rewrite this?????
        if(setpoint != null) {
			room.sendCommand(setpoint.state as Number)
			logInfo(logName, "Setpoint is now " + setpoint.state + " in room " + room.name.toString)
		}
        
    ]

end

rule "State Lighting Rule"
when
    Item vTimeOfDay received command or
	Item vWorkMode received command
then
	// ---------------------- Create some initial variables ----------------------------
    val mode = vWorkMode.state.toString.toUpperCase()
    val tod = vTimeOfDay.state.toString.toUpperCase()
    // ---------------------- Non-heating tasks to perform based on time of day ----------------------------
    if(mode == "NORMAL") {
        switch(tod){
            case tod.contains("MORNING"): {
                Scene_LivingRoom1.sendCommand(2)
            }
            case tod.contains("WORK"): {
                Scene_LivingRoom1.sendCommand(1)
                Scene_Bathroom.sendCommand(1)
                Scene_MasterBedRoom.sendCommand(1)
                Light_Hallway.sendCommand(OFF)
            }
            case tod.contains("EVENING"): {
                Dimmer_LivingRoom.sendCommand(40)
            }
            case tod.contains("NIGHT"): {
                Scene_BathRoom.sendCommand(1)
                Scene_MasterBedRoom.sendCommand(1)
                Light_Hallway.sendCommand(OFF)
                Thread::sleep(10)
                Scene_LivingRoom1.sendCommand(6)
                Thread::sleep(10)
                MoodSelector_LivingRoom.sendCommand(4)
            }
        }
    }

end